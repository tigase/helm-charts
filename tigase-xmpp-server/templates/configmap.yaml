{{- define "config" }}
admins = env('ADMINS')
'cluster-mode' = {{ .Values.clustering.enabled }}
'config-type' = '--gen-config-def'
'default-virtual-host' = env('VHOST')
'vhost-register-enabled' = true
{{- if .Values.hardenedMode }}
'hardened-mode' = {{ .Values.hardenedMode }}
{{- end }}
trusted = [ 'http@{clusterNode}' ]
{{- if .Values.debug }}
debug = [ {{ join ", " .Values.debug }} ]
{{- end }}
dataSource {
    default () {
        uri = 'jdbc:' + env('DB_TYPE') + '://' + env('DB_HOST', 'localhost') + ':' + env('DB_PORT', '5432') + '/' + env('DB_NAME', 'kangaroo_tigasedb') + '?user=' + env('DB_USER', 'kangaroo_db_user') + '&password=' + env('DB_PASS', 'kangaroo_db_pass')
    }
}
{{- if .Values.certificate.repository.enabled }}
'certificate-container' () {
    generateWildcardCertificate = {{ .Values.certificate.generateWildcard }}
    repository () {}
}
{{- end }}
'dns-resolver' {
    'tigase-primary-address' = env('INTERNAL_IP')
    'tigase-secondary-address' = env('EXTERNAL_IP')
}

bosh {
    seeOtherHost (active: false) {}
}
c2s {
    seeOtherHost (active: false) {}
}
http () {
    {{- if .Values.rest.openAccess }}
    'open-access' = true
    {{- end }}
    'dns-webservice' () {}
    index () {}
    rest {}
    server () {}
    setup (active: false) {}
    ui () {}
}
httpServer (class: tigase.http.jetty.JettyStandaloneHttpServer) {
    'request-timeout' = 10000
    connections {
        8080 () {
        }
    }
}
'message-archive' () {}
'message-router' () {
    'detailed-memory-statistics' = true
}
{{- if .Values.meet.enabled }}
meet () {
    uri = env('JANUS_URI')
}
{{- end }}
{{- if .Values.mailer.enabled }}
    mailer (class: tigase.extras.mailer.Mailer) {
        'mailer-from-address' = {{ .Values.mailer.from | quote }}
        'mailer-smtp-host' = {{ .Values.mailer.host | quote }}
        'mailer-smtp-port' = {{ .Values.mailer.port | quote }}
        'mailer-smtp-password' = {{ .Values.mailer.password | quote }}
        'mailer-smtp-username' = {{ .Values.mailer.username | quote }}
    }
{{- end }}
{{- if .Values.monitor }}
monitor (active: {{ .Values.monitor.enabled }}) {
    {{- with .Values.monitor }}
    commands {
        'x-add-task' = 'ADMIN'
        'x-add-timer-task' = 'ADMIN'
        'x-delete-task' = 'ADMIN'
    }
    {{- with .connections }}
    'connections-task' {
        enabled = {{ .enabled }}
        {{- with .period }}
        period = {{ . }}
        {{- end }}
    }
    {{- end }}
    {{- with .disk }}
    'disk-task' {
        enabled = {{ .enabled }}
        {{- with .period }}
        period = {{ . }}
        {{- end }}
    }
    {{- end }}
    {{- with .loadChecked }}
    'load-checker-task' {
        {{- with .averageLoadThreshold }}
        averageLoadThreshold = {{ . }}
        {{- end }}
        enabled = {{ .enabled }}
        {{- with .period }}
        period = {{ . }}
        {{- end }}
    }
    {{- end }}
    {{- with .logger }}
    'logger-task' {
        enabled = {{ .enabled }}
        levelThreshold = {{ .levelThreshold | quote }}
    }
    {{- end }}
    {{- with .memoryChecker}}
    'memory-checker-task' {
        enabled = {{ .enabled }}
        {{- with .maxHeapMemUsagePercentThreshold }}
        maxHeapMemUsagePercentThreshold = {{ . }}
        {{- end }}
        {{- with .maxNonHeapMemUsagePercentThreshold }}
        maxNonHeapMemUsagePercentThreshold = {{ . }}
        {{- end }}
        {{- with .period }}
        period = {{ . }}
        {{- end }}
    }
    {{- end }}
    {{- end }}
    {{- if and (and .Values.mailer.from .Values.monitor.mailer.to) .Values.monitor.mailer.enabled }}
    'monitor-mailer' (class: tigase.server.ext.monitor.MonitorMailer) {
        'from-address' = {{ .Values.monitor.mailer.from | default .Values.mailer.from | quote }}
        'to-addresses' = {{ .Values.monitor.mailer.to | quote }}
    }
    {{- end }}
}
{{- end }}
muc () {
    'message-filter-enabled' = false
    'ping-every-minute' = true
    {{- if .Values.clustering.enabled }}
    strategy (class: tigase.muc.cluster.ClusteredRoomStrategyV2) {}
    {{- end }}
}
pubsub () {
    'persistent-pep' = true
    'send-last-published-item-on-presence' = true
    {{- if .Values.clustering.enabled }}
    strategy (class: tigase.pubsub.cluster.ClusteredNodeStrategy) {}
    {{- end }}
}
'sess-man' {
    amp () {
{{- if .Values.sessMan.amp.threadsNo }}
        threadsNo = {{ .Values.sessMan.amp.threadsNo }}
{{- end }}
    }
    commands {
        'http://jabber.org/protocol/admin#add-user' = ['DOMAIN_OWNER', 'DOMAIN_ADMIN' ]
        'http://jabber.org/protocol/admin#change-user-password' = ['DOMAIN_OWNER', 'DOMAIN_ADMIN' ]
        'http://jabber.org/protocol/admin#delete-user' = ['DOMAIN_OWNER', 'DOMAIN_ADMIN' ]
        'http://jabber.org/protocol/admin#get-online-users-list' = ['DOMAIN_OWNER', 'DOMAIN_ADMIN' ]
        'http://jabber.org/protocol/admin#get-registered-user-list' = ['DOMAIN_OWNER', 'DOMAIN_ADMIN' ]
        'http://jabber.org/protocol/admin#user-stats' = ['DOMAIN_OWNER', 'DOMAIN_ADMIN' ]
        'user-roster-management-ext' = ['DOMAIN_OWNER', 'DOMAIN_ADMIN' ]
    }
    'jabber:iq:privacy' () {}
    'jabber:iq:register' () {}
    'message-archive-xep-0136' () {}
    'message-carbons' () {}
    'jabber:iq:register' () {}
    {{- if .Values.clustering.enabled }}
    strategy (class: tigase.server.cluster.strategy.OnlineUsersCachingStrategy) {}
    {{- end }}
    'urn:xmpp:mam:1' () {}
    'urn:xmpp:mix:pam:2' () {}
    'urn:xmpp:push:0' () {
        away () {}
    }
    'urn:xmpp:sasl:2' () {}
    'urn:xmpp:bind:0' () {}
    'spam-filter' (active: {{ .Values.spamFiltering.enabled }}) {}
}
{{- if .Values.fileUpload.enabled }}
upload () {
    logic () {
        'max-file-size' = env('HTTP_UPLOAD_MAX_FILESIZE')
        port = '443'
        protocol = 'https'
        serverName = env('HTTP_UPLOAD_DOMAIN')
    }
{{- if eq .Values.fileUpload.storage "s3" }}
    store (class: tigase.extras.http.upload.S3Store, active: true, exportable: true) {
    	autocreateBucket = true
        bucket = env('UPLOAD_S3_BUCKET')
        bucketKeyPrefix = env('UPLOAD_S3_PREFIX')
{{- if .Values.fileUpload.s3storage.region }}
        region = env('UPLOAD_S3_REGION')
{{- end }}
        accessKeyId = env('UPLOAD_S3_ACCESS_KEY_ID')
        secretKey = env('UPLOAD_S3_SECRET_KEY')
        endpointUrl = env('UPLOAD_S3_ENDPOINT_URL')
        pathStyleAccess = env('UPLOAD_S3_PATH_STYLE_ACCESS')
    }
{{- end }}
}  
{{- else }}
upload (active: false) {}
{{- end }}
'vhost-man' {
    commands {
        'comp-repo-item-add' = 'LOCAL'
        'comp-repo-item-remove' = 'LOCAL'
        'comp-repo-item-update' = 'LOCAL'
        'query-dns' = 'LOCAL'
        'ssl-certificate-add' = 'LOCAL'
    }
}
ws2s {
    seeOtherHost (active: false) {}
    connections {
    ports = [ 5290, 5291 ]
    5290 {
      socket = 'plain'
      type = 'accept'
    }
    5291 {
      socket = 'ssl'
      type = 'accept'
    }
  }
}
{{- if .Values.additionalConfiguration }}
{{ print .Values.additionalConfiguration }}
{{- end}}
{{- end }}

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "tigase-xmpp-server.fullname" . }}
  labels:
    {{- include "tigase-xmpp-server.labels" . | nindent 4 }}
data:
  config.tdsl: {{ (include "config" .) | trim | quote }}
