apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "mysql.fullname" . }}
  labels:
    {{- include "mysql.labels" . | nindent 4 }}
spec:
  replicas: 1
  {{- with .Values.updateStrategy }}
  strategy:
    type: {{ printf "%s" . }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "mysql.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "mysql.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "mysql.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.databaseSecretName" . }}
                  key: mysql-root-password
            {{- if not (empty .Values.auth.username) }}
            - name: MYSQL_USER
              value: {{ .Values.auth.username | quote }}
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ template "mysql.databaseSecretName" . }}
                  key: mysql-password
            {{- end }}
            - name: MYSQL_DATABASE
              value: {{ .Values.auth.database | quote }}
          ports:
            - name: mysql
              containerPort: 3306
              protocol: TCP
          volumeMounts:
            - name: mysql
              mountPath: /var/lib/mysql
          readinessProbe:
            exec:
              command:
                - bash
                - "-c"
                - |
                  mysql -uroot -p$MYSQL_ROOT_PASSWORD -e 'SELECT 1'
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      initContainers:
      {{- if .Values.backup.persistentVolume.enabled }}
        - name: init-from-pv
          image: busybox
          command: 
            - /bin/sh
            - "-c"
            - | 
              if [ -z "$(ls -A /var/lib/mysql)" ]; then
                echo No database files found.
                if [ ! -z "$(ls -A /backup)" ]; then
                  echo Restoring database data..
                  cp -rp /backup/* /var/lib/mysql/
                  xtrabackup --prepare --apply-log --use-memory=64M --target-dir=/var/lib/mysql
                fi
                echo Database data ready for use.
              else
                echo Database files already present.
              fi
          volumeMounts:
          - name: mysql
            mountPath: /var/lib/mysql
          - name: mysql-backup
            mountPath: /backup
      {{- end }}
      {{- if .Values.backup.s3.enabled }}
        - name: init-s3-config
          image: minio/mc
          env:
            - name: S3_ENDPOINT
              value: {{ .Values.backup.s3.endpoint | quote }}
            - name: S3_BUCKET
              value: {{ .Values.backup.s3.bucket | quote }}
            - name: S3_PREFIX
              value: {{ include "mysql.backupS3Prefix" . }}               
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.backupS3SecretName" . }}
                  key: access-key
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.backupS3SecretName" . }}
                  key: secret-key 
          command:
            - /bin/sh
            - "-c"
            - |
              mc alias set backup $S3_ENDPOINT $S3_ACCESS_KEY $S3_SECRET_KEY
              mc ls backup/$S3_BUCKET/$S3_PREFIX | tail -n 1 | awk '{print substr($NF, 1, length($NF)-1)}' | while read q 
              do
                echo "S3_PREFIX=$S3_PREFIX$q" > /s3-config/config
              done
          volumeMounts:
            - name: mysql-s3-config
              mountPath: /s3-config
        - name: init-s3
          image: perconalab/percona-xtrabackup:8.0.26-18
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.databaseSecretName" . }}
                  key: mysql-root-password
            - name: S3_ENDPOINT
              value: {{ .Values.backup.s3.endpoint | quote }}
            - name: S3_BUCKET
              value: {{ .Values.backup.s3.bucket | quote }}              
            - name: S3_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.backupS3SecretName" . }}
                  key: access-key
            - name: S3_SECRET_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "mysql.backupS3SecretName" . }}
                  key: secret-key   
          command: 
            - /bin/sh
            - "-c"
            - |
              if [ -z "$(ls -A /var/lib/mysql)" ]; then
                echo No database files found.
                if [ -f /s3-config/config ]; then
                  source /s3-config/config
                  xbcloud get --storage=s3 --s3-endpoint="$S3_ENDPOINT" --s3-access-key=$S3_ACCESS_KEY --s3-secret-key=$S3_SECRET_KEY --s3-bucket=$S3_BUCKET $S3_PREFIX | xbstream -x -C /var/lib/mysql    
                  xtrabackup --decompress --remove-original --target-dir=/var/lib/mysql
                  xtrabackup --prepare --apply-log --use-memory=64M --target-dir=/var/lib/mysql
                  echo Database data ready for use.
                else
                  echo No backup, skipping restore.
                fi
              else
                echo Database files already present.
              fi
      {{- end }}       
      volumes:
        - name: mysql
        {{- if .Values.persistentVolume.enabled }}
          persistentVolumeClaim:
            claimName: {{ if .Values.persistentVolume.existingClaim }}{{ .Values.persistentVolume.existingClaim }}{{- else }}{{ template "mysql.fullname" . }}{{- end }}
        {{- else }}
          emptyDir:
          {{- if .Values.emptyDir.sizeLimit }}
            sizeLimit: {{ .Values.mysql.emptyDir.sizeLimit }}
          {{- else }}
            {}
          {{- end }}
        {{- end }}
        {{- if .Values.backup.persistentVolume.enabled }}
        - name: mysql-backup
          persistentVolumeClaim:
            claimName: {{ if .Values.backup.persistentVolume.existingClaim }}{{ .Values.backup.persistentVolume.existingClaim }}{{- else }}{{ template "mysql.backupVolume" . }}{{- end }}
        {{- end }} 
        {{- if .Values.backup.s3.enabled }}
        - name: mysql-s3-config
          emptyDir:
            medium: Memory
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
